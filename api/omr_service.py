
import cv2
import numpy as np
from PIL import Image
import os
import math
import time


def calculate_distance(p1, p2):
    """T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm"""
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def select_four_extreme_markers_safe(square_markers):
    """
    Ch·ªçn 4 marker extreme m·ªôt c√°ch an to√†n, ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p

    Args:
        square_markers: List of (cx, cy, corners_sorted) tuples

    Returns:
        tuple: (tl_idx, tr_idx, bl_idx, br_idx) - indices c·ªßa 4 marker ƒë∆∞·ª£c ch·ªçn

    Raises:
        ValueError: N·∫øu kh√¥ng ƒë·ªß 4 marker ho·∫∑c kh√¥ng th·ªÉ ch·ªçn 4 marker kh√°c nhau
    """
    if len(square_markers) < 4:
        raise ValueError(f"Kh√¥ng ƒë·ªß marker ƒë·ªÉ ch·ªçn 4 ƒë·ªânh. Ch·ªâ c√≥ {len(square_markers)} marker.")

    centers = np.array([(cx, cy) for cx, cy, _ in square_markers])
    used_indices = set()

    # B∆∞·ªõc 1: Ch·ªçn top-left marker (x+y nh·ªè nh·∫•t)
    available_indices = [i for i in range(len(centers)) if i not in used_indices]
    tl_idx = min(available_indices, key=lambda i: centers[i][0] + centers[i][1])
    used_indices.add(tl_idx)
    print(f"üîç Selected top-left marker: index={tl_idx}, center={centers[tl_idx]}")

    # B∆∞·ªõc 2: Ch·ªçn top-right marker (x-y l·ªõn nh·∫•t trong c√°c marker c√≤n l·∫°i)
    available_indices = [i for i in range(len(centers)) if i not in used_indices]
    if not available_indices:
        raise ValueError("Kh√¥ng th·ªÉ ch·ªçn top-right marker - kh√¥ng c√≤n marker n√†o kh·∫£ d·ª•ng")
    tr_idx = max(available_indices, key=lambda i: centers[i][0] - centers[i][1])
    used_indices.add(tr_idx)
    print(f"üîç Selected top-right marker: index={tr_idx}, center={centers[tr_idx]}")

    # B∆∞·ªõc 3: Ch·ªçn bottom-left marker (y-x l·ªõn nh·∫•t trong c√°c marker c√≤n l·∫°i)
    available_indices = [i for i in range(len(centers)) if i not in used_indices]
    if not available_indices:
        raise ValueError("Kh√¥ng th·ªÉ ch·ªçn bottom-left marker - kh√¥ng c√≤n marker n√†o kh·∫£ d·ª•ng")
    bl_idx = max(available_indices, key=lambda i: centers[i][1] - centers[i][0])
    used_indices.add(bl_idx)
    print(f"üîç Selected bottom-left marker: index={bl_idx}, center={centers[bl_idx]}")

    # B∆∞·ªõc 4: Ch·ªçn bottom-right marker (x+y l·ªõn nh·∫•t trong c√°c marker c√≤n l·∫°i)
    available_indices = [i for i in range(len(centers)) if i not in used_indices]
    if not available_indices:
        raise ValueError("Kh√¥ng th·ªÉ ch·ªçn bottom-right marker - kh√¥ng c√≤n marker n√†o kh·∫£ d·ª•ng")
    br_idx = max(available_indices, key=lambda i: centers[i][0] + centers[i][1])
    used_indices.add(br_idx)
    print(f"üîç Selected bottom-right marker: index={br_idx}, center={centers[br_idx]}")

    # Validation: ƒê·∫£m b·∫£o 4 indices kh√°c nhau
    selected_indices = {tl_idx, tr_idx, bl_idx, br_idx}
    if len(selected_indices) != 4:
        raise ValueError(f"L·ªói logic: ƒê√£ ch·ªçn tr√πng marker. Indices: tl={tl_idx}, tr={tr_idx}, bl={bl_idx}, br={br_idx}")

    print(f"‚úÖ Successfully selected 4 unique markers: {selected_indices}")
    return tl_idx, tr_idx, bl_idx, br_idx

def validate_marker_selection(centers, tl_idx, tr_idx, bl_idx, br_idx, min_distance=50):
    """
    Validate r·∫±ng 4 marker ƒë∆∞·ª£c ch·ªçn h·ª£p l√Ω

    Args:
        centers: Array of marker centers
        tl_idx, tr_idx, bl_idx, br_idx: Indices c·ªßa 4 marker ƒë∆∞·ª£c ch·ªçn
        min_distance: Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c marker

    Raises:
        ValueError: N·∫øu validation fail
    """
    indices = [tl_idx, tr_idx, bl_idx, br_idx]

    # Ki·ªÉm tra kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c marker
    for i in range(len(indices)):
        for j in range(i+1, len(indices)):
            dist = np.linalg.norm(centers[indices[i]] - centers[indices[j]])
            if dist < min_distance:
                raise ValueError(f"Marker {indices[i]} v√† {indices[j]} qu√° g·∫ßn nhau (distance={dist:.1f} < {min_distance})")

    print(f"‚úÖ Marker validation passed - all markers are sufficiently spaced (min_distance={min_distance})")
    return True



def debug_marker_detection(image, thresh, contours, image_path):
    """Debug chi ti·∫øt qu√° tr√¨nh ph√°t hi·ªán marker"""
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    debug_dir = f"debug_marker_detection"
    os.makedirs(debug_dir, exist_ok=True)

    # L∆∞u ·∫£nh threshold
    cv2.imwrite(os.path.join(debug_dir, f"{base_name}_threshold.png"), thresh)

    # T·∫°o ·∫£nh debug v·ªõi t·∫•t c·∫£ contours
    debug_img = image.copy()
    debug_info = []

    print(f"Total contours found: {len(contours)}")

    for i, cnt in enumerate(contours):
        area = cv2.contourArea(cnt)
        if area < 200:  # B·ªè qua contour qu√° nh·ªè
            continue

        # V·∫Ω t·∫•t c·∫£ contours c√≥ area > 100
        cv2.drawContours(debug_img, [cnt], -1, (128, 128, 128), 1)  # M√†u x√°m cho t·∫•t c·∫£

        # Approximation cho t·∫•t c·∫£ contours
        epsilon = 0.02 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)

        # T√≠nh c√°c metrics cho t·∫•t c·∫£
        _, _, w, h = cv2.boundingRect(approx)
        aspect_ratio = float(w) / h
        bbox_area = w * h
        contour_area = cv2.contourArea(cnt)
        fill_ratio = contour_area / bbox_area if bbox_area > 0 else 0
        perimeter = cv2.arcLength(cnt, True)
        compactness = 4 * np.pi * contour_area / (perimeter * perimeter) if perimeter > 0 else 0

        # T√≠nh solidity
        hull = cv2.convexHull(cnt)
        hull_area = cv2.contourArea(hull)
        solidity = contour_area / hull_area if hull_area > 0 else 0

        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        is_4_vertices = len(approx) == 4
        is_convex = cv2.isContourConvex(approx)
        good_aspect = 0.85 < aspect_ratio < 1.1
        good_fill = fill_ratio > 0.7
        good_compact = 0.4 < compactness < 0.85  # Kh√¥ng qu√° tr√≤n
        good_solidity = solidity > 0.85
        good_area = 1000 <= area <= 3200

        is_valid_marker = (is_4_vertices and is_convex and
                          good_aspect and good_fill and good_compact and
                          good_solidity and good_area)

        # V·∫Ω v√† ghi th√¥ng tin cho contours c√≥ area ph√π h·ª£p
        if area >= 500:  # Ch·ªâ hi·ªÉn th·ªã contours l·ªõn h∆°n
            M = cv2.moments(approx)
            if M['m00'] != 0:
                cx = int(M['m10'] / M['m00'])
                cy = int(M['m01'] / M['m00'])

                # M√†u s·∫Øc d·ª±a tr√™n t√≠nh h·ª£p l·ªá
                if is_valid_marker:
                    color = (0, 255, 0)  # Xanh l√° - valid
                elif good_area and is_4_vertices:
                    color = (0, 255, 255)  # V√†ng - g·∫ßn ƒë√∫ng
                else:
                    color = (0, 0, 255)  # ƒê·ªè - kh√¥ng h·ª£p l·ªá

                cv2.circle(debug_img, (cx, cy), 8, color, -1)
                cv2.putText(debug_img, str(i), (cx-10, cy-15),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)

                debug_info.append({
                    'id': i,
                    'center': (cx, cy),
                    'area': contour_area,
                    'vertices': len(approx),
                    'convex': is_convex,
                    'aspect_ratio': aspect_ratio,
                    'fill_ratio': fill_ratio,
                    'compactness': compactness,
                    'solidity': solidity,
                    'good_area': good_area,
                    'is_valid': is_valid_marker
                })

    # L∆∞u ·∫£nh debug
    cv2.imwrite(os.path.join(debug_dir, f"{base_name}_debug_markers.png"), debug_img)

    # L∆∞u th√¥ng tin chi ti·∫øt
    debug_file_path = os.path.join(debug_dir, f"{base_name}_debug_info.txt")
    try:
        with open(debug_file_path, 'w', encoding='utf-8') as f:
            f.write("MARKER DETECTION DEBUG INFO\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Total contours analyzed: {len(debug_info)}\n")
            f.write(f"Valid markers found: {len([info for info in debug_info if info['is_valid']])}\n\n")

            for info in debug_info:
                f.write(f"Marker {info['id']}: {'‚úì VALID' if info['is_valid'] else '‚úó INVALID'}\n")
                f.write(f"  Center: {info['center']}\n")
                f.write(f"  Area: {info['area']:.1f} {'‚úì' if info['good_area'] else '‚úó'}\n")
                f.write(f"  Vertices: {info['vertices']} {'‚úì' if info['vertices'] == 4 else '‚úó'}\n")
                f.write(f"  Convex: {info['convex']} {'‚úì' if info['convex'] else '‚úó'}\n")
                f.write(f"  Aspect ratio: {info['aspect_ratio']:.3f} {'‚úì' if 0.85 < info['aspect_ratio'] < 1.1 else '‚úó'}\n")
                f.write(f"  Fill ratio: {info['fill_ratio']:.3f} {'‚úì' if info['fill_ratio'] > 0.7 else '‚úó'}\n")
                f.write(f"  Compactness: {info['compactness']:.3f} {'‚úì' if 0.4 < info['compactness'] < 0.85 else '‚úó'}\n")
                f.write(f"  Solidity: {info['solidity']:.3f} {'‚úì' if info['solidity'] > 0.85 else '‚úó'}\n")
                f.write("\n")
        print(f"Debug info written to: {debug_file_path}")
    except Exception as e:
        print(f"Error writing debug info: {e}")

    print(f"Debug info saved to {debug_dir}/")
    valid_markers = [info for info in debug_info if info['is_valid']]
    print(f"Found {len(valid_markers)} valid markers out of {len(debug_info)} candidates")

    return debug_info

def save_error_images(image, thresh, square_markers, image_path, error_type, ordered_points=None):
    """L∆∞u ·∫£nh debug khi g·∫∑p l·ªói"""
    error_dir = "errorLog"
    os.makedirs(error_dir, exist_ok=True)

    base = os.path.splitext(os.path.basename(image_path))[0]
    timestamp = str(int(time.time()))

    # L∆∞u ·∫£nh threshold
    thresh_path = os.path.join(error_dir, f"{base}_{error_type}_{timestamp}_thresh.png")
    Image.fromarray(thresh).save(thresh_path)

    # T·∫°o ·∫£nh debug v·ªõi marker ƒë∆∞·ª£c ƒë√°nh d·∫•u
    debug_image = image.copy()

    # ƒê√°nh d·∫•u t·∫•t c·∫£ marker t√¨m ƒë∆∞·ª£c
    for i, (cx, cy) in enumerate(square_markers):
        cv2.circle(debug_image, (cx, cy), 15, (0, 255, 0), 3)  # M√†u xanh l√°
        cv2.putText(debug_image, str(i+1), (cx-10, cy-20), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    # N·∫øu c√≥ ordered_points, ƒë√°nh d·∫•u 4 extreme points
    if ordered_points is not None:
        colors = [(255, 0, 0), (0, 0, 255), (255, 255, 0), (255, 0, 255)]  # ƒê·ªè, Xanh d∆∞∆°ng, V√†ng, T√≠m
        labels = ["TL", "TR", "BL", "BR"]
        for i, (pt, color, label) in enumerate(zip(ordered_points, colors, labels)):
            cv2.circle(debug_image, tuple(pt.astype(int)), 20, color, -1)
            cv2.putText(debug_image, label, (int(pt[0])-15, int(pt[1])+5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

    # L∆∞u ·∫£nh debug
    debug_path = os.path.join(error_dir, f"{base}_{error_type}_{timestamp}_debug.png")
    Image.fromarray(cv2.cvtColor(debug_image, cv2.COLOR_BGR2RGB)).save(debug_path)

    print(f"üö® Error images saved: {thresh_path}, {debug_path}")

def count_valid_square_markers(contours):
    """
    ƒê·∫øm s·ªë l∆∞·ª£ng marker vu√¥ng h·ª£p l·ªá t·ª´ danh s√°ch contours

    Args:
        contours: Danh s√°ch contours t·ª´ cv2.findContours

    Returns:
        int: S·ªë l∆∞·ª£ng marker vu√¥ng h·ª£p l·ªá
    """
    valid_markers = 0

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 250 or area > 4000:
            continue

        # S·ª≠ d·ª•ng epsilon nh·ªè h∆°n ƒë·ªÉ ch√≠nh x√°c h∆°n
        epsilon = 0.015 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)

        if len(approx) == 4 and cv2.isContourConvex(approx):
            _, _, w, h = cv2.boundingRect(approx)
            aspect_ratio = float(w) / h

            # Ki·ªÉm tra th√™m ƒë·ªô vu√¥ng th·ª±c t·∫ø
            bbox_area = w * h
            contour_area = cv2.contourArea(cnt)
            fill_ratio = contour_area / bbox_area if bbox_area > 0 else 0

            # Ki·ªÉm tra ƒë·ªô compact (g·∫ßn h√¨nh vu√¥ng)
            perimeter = cv2.arcLength(cnt, True)
            compactness = 4 * np.pi * contour_area / (perimeter * perimeter) if perimeter > 0 else 0

            # Ki·ªÉm tra solidity (ƒë·ªô ƒë·∫∑c)
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            solidity = contour_area / hull_area if hull_area > 0 else 0

            # ƒêi·ªÅu ki·ªán strict h∆°n cho marker vu√¥ng - lo·∫°i b·ªè h√¨nh tr√≤n
            if (0.7 < aspect_ratio < 1.4 and
                fill_ratio > 0.7 and        # Ph·∫£i fill √≠t nh·∫•t 70% bounding box
                0.4 < compactness < 0.9 and # Kh√¥ng qu√° tr√≤n (lo·∫°i b·ªè h√¨nh tr√≤n c√≥ compactness ~1.0)
                solidity > 0.7):           # ƒê·ªß ƒë·∫∑c (kh√¥ng c√≥ l·ªó h·ªïng)
                valid_markers += 1

    return valid_markers

def find_valid_rectangle(contours):
    """
    T·ª´ contours, t√¨m 4 marker ·ªü g√≥c t·∫°o th√†nh h√¨nh ch·ªØ nh·∫≠t h·ª£p l·ªá.

    Args:
        contours: Danh s√°ch contours t·ª´ cv2.findContours.

    Returns:
        tuple: (ordered_points, diagonal_length, count) n·∫øu th√†nh c√¥ng, (None, 0, 0) n·∫øu th·∫•t b·∫°i.
    """
    square_markers = []
    # 1. Filter for square-like markers
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < 250 or area > 4000: # M·ªü r·ªông ng∆∞·ª°ng di·ªán t√≠ch ƒë·ªÉ b·∫Øt ƒë∆∞·ª£c nhi·ªÅu marker ti·ªÅm nƒÉng h∆°n
            continue

        epsilon = 0.015 * cv2.arcLength(cnt, True)
        approx = cv2.approxPolyDP(cnt, epsilon, True)

        if len(approx) == 4 and cv2.isContourConvex(approx):
            _, _, w, h = cv2.boundingRect(approx)
            aspect_ratio = float(w) / h
            bbox_area = w * h
            contour_area = cv2.contourArea(cnt)
            fill_ratio = contour_area / bbox_area if bbox_area > 0 else 0
            perimeter = cv2.arcLength(cnt, True)
            compactness = 4 * np.pi * contour_area / (perimeter * perimeter) if perimeter > 0 else 0
            hull = cv2.convexHull(cnt)
            hull_area = cv2.contourArea(hull)
            solidity = contour_area / hull_area if hull_area > 0 else 0

            if (0.7 < aspect_ratio < 1.4 and # M·ªü r·ªông ng∆∞·ª°ng t·ª∑ l·ªá khung h√¨nh
                fill_ratio > 0.65 and       # Gi·∫£m ng∆∞·ª°ng fill ratio m·ªôt ch√∫t
                0.4 < compactness < 0.9 and # Gi·ªØ nguy√™n
                solidity > 0.75):          # Gi·∫£m ng∆∞·ª°ng solidity m·ªôt ch√∫t
                M = cv2.moments(approx)
                if M['m00'] != 0:
                    cx = int(M['m10'] / M['m00'])
                    cy = int(M['m01'] / M['m00'])
                    corners = approx.reshape(-1, 2)
                    corners_sorted = np.zeros((4, 2), dtype=np.int32)
                    corners_sorted[0] = min(corners, key=lambda p: p[0] + p[1])
                    corners_sorted[1] = max(corners, key=lambda p: p[0] - p[1])
                    corners_sorted[2] = max(corners, key=lambda p: p[1] - p[0])
                    corners_sorted[3] = max(corners, key=lambda p: p[0] + p[1])
                    square_markers.append((cx, cy, corners_sorted))

    marker_count = len(square_markers)
    if marker_count < 4:
        return None, 0, marker_count

    try:
        centers = np.array([(cx, cy) for cx, cy, _ in square_markers])
        tl_idx, tr_idx, bl_idx, br_idx = select_four_extreme_markers_safe(square_markers)
        validate_marker_selection(centers, tl_idx, tr_idx, bl_idx, br_idx, min_distance=50)
    except ValueError:
        return None, 0, marker_count

    tl_marker_corners = square_markers[tl_idx][2]
    tr_marker_corners = square_markers[tr_idx][2]
    bl_marker_corners = square_markers[bl_idx][2]
    br_marker_corners = square_markers[br_idx][2]

    top_left_point = tl_marker_corners[3]
    top_right_point = tr_marker_corners[2]
    bottom_left_point = bl_marker_corners[1]
    bottom_right_point = br_marker_corners[0]

    ordered_points = np.array([top_left_point, top_right_point, bottom_left_point, bottom_right_point], dtype="float32")

    diagonal1 = calculate_distance(top_left_point, bottom_right_point)
    diagonal2 = calculate_distance(top_right_point, bottom_left_point)
    relative_error = abs(diagonal1 - diagonal2) / max(diagonal1, diagonal2)

    if relative_error > 0.05:
        return None, 0, marker_count # Not a valid rectangle

    return ordered_points, max(diagonal1, diagonal2), marker_count

def find_optimal_threshold_and_markers(gray_image):
    """
    T√¨m threshold t·ªëi ∆∞u b·∫±ng c√°ch t√¨m h√¨nh ch·ªØ nh·∫≠t h·ª£p l·ªá c√≥ ƒë∆∞·ªùng ch√©o l·ªõn nh·∫•t.
    """
    print("üîç Searching for optimal threshold by finding the largest valid rectangle...")

    best_threshold = -1
    best_diagonal = 0
    best_points = None
    best_thresh_image = None
    results = []

    for threshold_val in range(20, 201, 5):
        _, thresh = cv2.threshold(gray_image, threshold_val, 255, cv2.THRESH_BINARY_INV)
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        ordered_points, diagonal_length, marker_count = find_valid_rectangle(contours)

        results.append({'thresh': threshold_val, 'markers': marker_count, 'diagonal': diagonal_length})

        if ordered_points is not None and diagonal_length > best_diagonal:
            best_diagonal = diagonal_length
            best_threshold = threshold_val
            best_points = ordered_points
            best_thresh_image = thresh.copy()
            print(f"üéØ New best: thresh={threshold_val}, markers={marker_count}, diagonal={diagonal_length:.2f}")

    print("\nüìä Threshold search results:")
    for res in results:
        status = "‚ùå"
        if res['diagonal'] > 0:
            if res['thresh'] == best_threshold:
                status = "üéØ BEST"
            else:
                status = "‚úÖ GOOD"
        print(f"   Threshold {res['thresh']}: {res['markers']} markers, diagonal={res['diagonal']:.1f} {status}")

    if best_points is None:
        # Fallback: if no valid rectangle is found, use the one with most markers as a last resort
        print("\n‚ö†Ô∏è No valid rectangle found. Falling back to threshold with most markers.")
        max_markers = -1
        fallback_thresh = -1
        for res in results:
            if res['markers'] > max_markers:
                max_markers = res['markers']
                fallback_thresh = res['thresh']

        if fallback_thresh != -1:
             print(f"üéØ Fallback selected: threshold {fallback_thresh} with {max_markers} markers.")
             _, best_thresh_image = cv2.threshold(gray_image, fallback_thresh, 255, cv2.THRESH_BINARY_INV)
             return fallback_thresh, best_thresh_image, None # No points, force re-detection
        else:
            return -1, None, None # Complete failure

    print(f"\nüéØ Optimal threshold found: {best_threshold} with diagonal length {best_diagonal:.2f}")
    return best_threshold, best_thresh_image, best_points

def process_image(image_path, output_dir, save_debug=False):
    """
    X·ª≠ l√Ω ·∫£nh tr·ª±c ti·∫øp kh√¥ng qua shadow removal

    Args:
        image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu v√†o
        output_dir: Th∆∞ m·ª•c ƒë·∫ßu ra
        save_debug: C√≥ l∆∞u ·∫£nh debug kh√¥ng
    """
    print(f"üîÑ Processing: {image_path}")

    # ƒê·ªçc ·∫£nh g·ªëc
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh: {image_path}")

    base_name = os.path.splitext(os.path.basename(image_path))[0]
    print(f"üìè Image size: {image.shape}")
    print(f"üöÄ Processing directly without shadow removal")

    # Chuy·ªÉn sang grayscale ƒë·ªÉ detect marker
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # T√¨m threshold t·ªëi ∆∞u v√† c√°c ƒëi·ªÉm marker t∆∞∆°ng ·ª©ng
    optimal_thresh, thresh, ordered_points = find_optimal_threshold_and_markers(gray)

    if optimal_thresh == -1 or thresh is None:
        # L∆∞u ·∫£nh l·ªói n·∫øu kh√¥ng t√¨m th·∫•y threshold ph√π h·ª£p
        save_error_images(image, gray, [], image_path, "no_threshold_found")
        raise ValueError("Kh√¥ng th·ªÉ t√¨m th·∫•y b·∫•t k·ª≥ threshold ph√π h·ª£p n√†o ƒë·ªÉ ph√°t hi·ªán marker.")

    # N·∫øu kh√¥ng t√¨m th·∫•y h√¨nh ch·ªØ nh·∫≠t h·ª£p l·ªá, fallback ƒë·ªÉ th·ª≠ l·∫°i v·ªõi threshold t·ªët nh·∫•t
    if ordered_points is None:
        print("Retrying marker detection with fallback threshold...")
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        ordered_points, _, _ = find_valid_rectangle(contours)

    if ordered_points is None:
        # V·∫´n kh√¥ng th√†nh c√¥ng ngay c·∫£ v·ªõi fallback
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        square_markers = []
        for cnt in contours:
             if 1000 < cv2.contourArea(cnt) < 3200:
                 M = cv2.moments(cnt)
                 if M['m00'] != 0:
                    cx = int(M['m10'] / M['m00'])
                    cy = int(M['m01'] / M['m00'])
                    square_markers.append((cx,cy))
        save_error_images(image, thresh, square_markers, image_path, "insufficient_markers")
        raise ValueError("Kh√¥ng t√¨m ƒë·ªß 4 marker h·ª£p l·ªá ƒë·ªÉ th·ª±c hi·ªán perspective correction.")

    # Debug marker detection n·∫øu c·∫ßn
    if save_debug:
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        debug_marker_detection(image, thresh, contours, image_path)

    width, height = 800, 1131
    # ƒêi·ªÅu ch·ªânh destination points ƒë·ªÉ c·∫Øt th√™m v√†o b√™n trong
    margin_left = 10   # C·∫Øt th√™m 10px v√†o b√™n trong ·ªü ph√≠a tr√°i
    margin_top = 7    # C·∫Øt th√™m 15px v√†o b√™n trong ·ªü ph√≠a tr√™n
    margin_right = 4   # C·∫Øt th√™m 3px v√†o b√™n trong ·ªü ph√≠a ph·∫£i

    dst_pts = np.array([
        [-margin_left, -margin_top],                    # top-left: d·ªãch ra ngo√†i ƒë·ªÉ c·∫Øt v√†o trong
        [width - 1 + margin_right, -margin_top],        # top-right: d·ªãch l√™n tr√™n v√† sang ph·∫£i
        [-margin_left, height - 1],                     # bottom-left: ch·ªâ d·ªãch sang tr√°i
        [width - 1 + margin_right, height - 1]          # bottom-right: d·ªãch sang ph·∫£i
    ], dtype="float32")

    M = cv2.getPerspectiveTransform(ordered_points, dst_pts)
    # S·ª≠ d·ª•ng INTER_CUBIC cho ch·∫•t l∆∞·ª£ng t·ªët h∆°n, tr√°nh m·ªù ·∫£nh
    warped = cv2.warpPerspective(image, M, (width, height), flags=cv2.INTER_CUBIC)

    # Debug ·∫£nh marker
    debug_image = image.copy()
    for pt in ordered_points:
        cv2.circle(debug_image, tuple(pt.astype(int)), 10, (0, 0, 255), -1)

    os.makedirs(output_dir, exist_ok=True)

    # T·∫°o t√™n file ƒë·∫ßu ra
    output_flattened = os.path.join(output_dir, f"{base_name}_flattened.png")
    output_debug = os.path.join(output_dir, f"{base_name}_debug.png")
    output_thresh = os.path.join(output_dir, f"{base_name}_thresh.png")

    # L∆∞u k·∫øt qu·∫£
    Image.fromarray(cv2.cvtColor(warped, cv2.COLOR_BGR2RGB)).save(output_flattened)
    Image.fromarray(cv2.cvtColor(debug_image, cv2.COLOR_BGR2RGB)).save(output_debug)
    Image.fromarray(thresh).save(output_thresh)

    print(f"‚úÖ Main outputs saved:")
    print(f"   Flattened: {output_flattened}")
    print(f"   Debug: {output_debug}")
    print(f"   Threshold: {output_thresh}")

    return output_flattened

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="C·∫Øt v√† l√†m ph·∫≥ng ·∫£nh tr·∫Øc nghi·ªám t·ª´ 4 marker ƒëen",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # X·ª≠ l√Ω ·∫£nh tr·ª±c ti·∫øp (t·ª± ƒë·ªông t√¨m threshold t·ªëi ∆∞u)
  python omr_marker_flatten_robust.py image.jpg

  # L∆∞u ·∫£nh debug
  python omr_marker_flatten_robust.py image.jpg --save-debug
        """
    )

    parser.add_argument("image_path", help="ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu v√†o")
    parser.add_argument("--output_dir", default="output", help="Th∆∞ m·ª•c ch·ª©a ·∫£nh ƒë·∫ßu ra")
    parser.add_argument("--save-debug", action='store_true',
                       help="L∆∞u ·∫£nh debug")

    args = parser.parse_args()

    print("üéØ OMR Marker Flatten Direct Processing v4.0")
    print("=" * 50)

    try:
        result_path = process_image(
            args.image_path,
            args.output_dir,
            save_debug=args.save_debug
        )
        print(f"\nüéâ Processing completed successfully!")
        print(f"üìÑ Main result: {result_path}")

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        print("üí° Try using --save-debug to see debug images")
        exit(1)
